plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

shadowJar {
    configurations = [project.configurations.shadow]
    exclude("META-INF")
    archiveFileName = "${project.archives_base_name}-${project.mod_version}-shadow.jar"
}

remapJar {
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    inputFile = file(shadowJar.archivePath)
}

configurations {
    jdaAndYaml {
        extendsFrom implementation
    }
}

repositories {
	mavenCentral()
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include implementation("org.spongepowered:configurate-core:${hocon_version}")
    include implementation("org.spongepowered:configurate-hocon:${hocon_version}")
    include implementation("com.typesafe:config:${typesafe_config_version}")
	include implementation("io.leangen.geantyref:geantyref:${geantyref_version}")

	api shadow("org.mongodb:mongodb-driver-sync:${mongodb_version}")
	api shadow("org.xerial:sqlite-jdbc:${sqlite_jdbc_version}")
	api shadow("org.postgresql:postgresql:${postgresql_version}")

	api shadow('org.yaml:snakeyaml:2.0')
	api shadow("net.dv8tion:JDA:${project.jda_version}") {
        exclude module: "opus-java"
    }
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.register("downloadDependencies", Copy) { Copy copy ->
    copy.into project.layout.buildDirectory.dir("dependencies")
    copy.from {
        configurations.matching { Configuration c ->
            c.isCanBeResolved()
        }.collect { Configuration c ->
            c.resolve()
        }.flatten().unique()
    }
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}